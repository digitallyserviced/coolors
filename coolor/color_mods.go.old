package coolor

import (
	"fmt"
	"math"
	// "github.com/gookit/goutil/dump"
)

type ColorModdifier func(hmo *ColorModOptions) *CoolorMod

func NewColorMod(mod *ColorModOptions, chm ColorModdifier) *ColorMod {
	cc := NewRandomCoolorColor()
	cm := &ColorMod{
		ColorModifier: &ColorModifier{},
	}
	cm.history = make(ColorModActions, 0)
	cm.last = NewColorModAction("nop", cm.Set, 0.0, nil)
	cm.orig = cc
	cm.current = *cc.Clone()
	cm.ColorModifier.name = mod.name
	// cm.ColorModifier.ChannelMod = chm(mod)
	// cm.ColorModifier.ChannelModOptions = mod
	cm.updateState(true)
	return cm
}

var (
	SpinModOptions     *ColorModOptions = NewColorModOption("Spin", -360, 360, 1, 1, 1, 0.5)
	BrightenModOptions *ColorModOptions = NewColorModOption("Brighten", -100, 100, 1, 1, 1, 1)
)

var SpinMod *ColorMod = NewColorMod(SpinModOptions, spinFunc)
var BrightenMod *ColorMod = NewColorMod(BrightenModOptions, brightenFunc)

func spinFunc(hmo *ColorModOptions) *CoolorMod {
	cm := &CoolorMod{
		cmo: hmo,
		FormatValue: func(cc CoolColor) string {
			hsl, _ := MakeColor(cc)
			l, s, h := hsl.LuvLCh()
			_, _ = l, s
			return fmt.Sprintf(" Angle = %0.2fÂ° + Spin ", h)
		},
		GetValue: func(cc CoolColor) float64 {
			hsl, ok := MakeColor(cc)
			if !ok {
				fmt.Println("Error making color")
			}
			l, s, h := hsl.LuvLCh()
			_, _ = s, l
			return h
		},
		SetValue: func(cc CoolColor, value float64) (CoolColor, bool) {
			hsl, ok := MakeColor(cc)
			if !ok {
				fmt.Println("Error making color")
			}
			l, s, h := hsl.LuvLCh()
			_, _ = s, l
			hue := math.Mod(h+value, 360)
			if hue < 0 {
				h = 360 + hue
			} else {
				h = hue
			}
			// h = h + value
			hsl = LuvLCh(l, s, h)
			return hsl, hsl.IsValid()
		},
	}
	return cm
}
func brightenFunc(hmo *ColorModOptions) *CoolorMod {
	cm := &CoolorMod{
		cmo: hmo,
		FormatValue: func(cc CoolColor) string {
			hsl, _ := MakeColor(cc)
			l, s, h := hsl.LuvLCh()
			_, _ = s, h
			return fmt.Sprintf(" l = %0.1f ", l)
		},
		GetValue: func(cc CoolColor) float64 {
			c, ok := MakeColor(cc)
			if !ok {
				fmt.Println("Error making color")
			}
			w, _ := Hex("#FFFFFF")
			dist := c.DistanceRgb(w)
			//    // r,g,b := c.Values()
			// l, s, h := hsl.LuvLCh()
			// _, _ = h, s
			return dist
		},
		SetValue: func(cc CoolColor, value float64) (CoolColor, bool) {
			hsl, ok := MakeColor(cc)
			if !ok {
				fmt.Println("Error making color")
			}
			l, s, h := hsl.LuvLCh()
			_, _ = h, s
			l = value
			hsl = LuvLCh(l, s, h)
			return hsl, hsl.IsValid()
		},
	}
	return cm
}

// func satFunc(hmo *ChannelModOptions) *ChannelMod {
// 	cm := &ChannelMod{
// 		cmo: hmo,
// 		FormatValue: func(cc CoolColor) string {
// 			hsl, _ := MakeColor(cc)
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = l, h
// 			return fmt.Sprintf(" ch = %0.1f ", s)
// 		},
// 		GetValue: func(cc CoolColor) float64 {
// 			hsl, ok := MakeColor(cc)
// 			if !ok {
// 				fmt.Println("Error making color")
// 			}
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = h, l
// 			return s
// 		},
// 		SetValue: func(cc CoolColor, value float64) (CoolColor, bool) {
// 			hsl, ok := MakeColor(cc)
// 			if !ok {
// 				fmt.Println("Error making color")
// 			}
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = h, l
// 			s = value
// 			hsl = LuvLCh(l, s, h)
// 			return hsl, hsl.IsValid()
// 		},
// 	}
// 	return cm
// }
// func lightFunc(hmo *ChannelModOptions) *ChannelMod {
// 	cm := &ChannelMod{
// 		cmo: hmo,
// 		FormatValue: func(cc CoolColor) string {
// 			hsl, _ := MakeColor(cc)
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = s, h
// 			return fmt.Sprintf(" l = %0.1f ", l)
// 		},
// 		GetValue: func(cc CoolColor) float64 {
// 			hsl, ok := MakeColor(cc)
// 			if !ok {
// 				fmt.Println("Error making color")
// 			}
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = h, s
// 			return l
// 		},
// 		SetValue: func(cc CoolColor, value float64) (CoolColor, bool) {
// 			hsl, ok := MakeColor(cc)
// 			if !ok {
// 				fmt.Println("Error making color")
// 			}
// 			l, s, h := hsl.LuvLCh()
// 			_, _ = h, s
// 			l = value
// 			hsl = LuvLCh(l, s, h)
// 			return hsl, hsl.IsValid()
// 		},
// 	}
// 	return cm
// }

// vim: ts=2 sw=2 et ft=go
